local lua_reference = gui.Reference("Ragebot", "Accuracy", "Attack");

local double_tap_enable = gui.Checkbox(lua_reference, "double_tap_enable", "Enable Double Tap", false);
local hide_shots_enable = gui.Checkbox(lua_reference, "hide_shots_enable", "Enable Hide Shots", false);
local indicators_enable = gui.Checkbox(lua_reference, "indicators_enable", "Enable Indicators", false);

local indicators_color_active = gui.ColorPicker(indicators_enable, "indicators_color_active", "", 30, 255, 30)
local indicators_color_inactive = gui.ColorPicker(indicators_enable, "indicators_color_inactive", "", 255, 30, 30)

--variables waiting for a draw callback to be defined
local screen_width, screen_height;

--part of gui, which will be filled later
local indicators_position_x, indicators_position_y;


local function setExploits()
    if double_tap_enable:GetValue() then
        gui.SetValue("rbot.accuracy.attack.shared.fire", "Defensive Warp Fire")
    elseif hide_shots_enable:GetValue() and not double_tap_enable:GetValue() then
        gui.SetValue("rbot.accuracy.attack.shared.fire", "Shift Fire")
    else
        gui.SetValue("rbot.accuracy.attack.shared.fire", "Off")
    end
end
callbacks.Register("CreateMove", setExploits)


local DISTANCE_BETWEEN_INDICATORS = 35
local INDICATORS_FONT = draw.CreateFont("Bahnschrift SemiBold", 35, 800)

local function drawIndicators()
    if indicators_enable:GetValue() then

        --creating sliders based on screen size
        if not screen_width or not screen_height then
            screen_width, screen_height = draw.GetScreenSize()
            indicators_position_x = gui.Slider(lua_reference, "indicators_position_x", "Indicators Position X", 20, 0, screen_width, 1)
            indicators_position_y = gui.Slider(lua_reference, "indicators_position_y", "Indicators Position Y", 700, 0, screen_height, 1)
        end

        --draw indicators
        local double_tap_indicator_color = double_tap_enable:GetValue() and {indicators_color_active:GetValue()} or {indicators_color_inactive:GetValue()}
        local hide_shots_indicator_color = (hide_shots_enable:GetValue() and not double_tap_enable:GetValue()) and {indicators_color_active:GetValue()} or {indicators_color_inactive:GetValue()}

        draw.SetFont(INDICATORS_FONT)

        draw.Color(double_tap_indicator_color[1], double_tap_indicator_color[2], double_tap_indicator_color[3], double_tap_indicator_color[4])
        draw.Text(indicators_position_x:GetValue(), indicators_position_y:GetValue(), "DT")

        draw.Color(hide_shots_indicator_color[1], hide_shots_indicator_color[2], hide_shots_indicator_color[3], hide_shots_indicator_color[4])
        draw.Text(indicators_position_x:GetValue(), indicators_position_y:GetValue() + DISTANCE_BETWEEN_INDICATORS, "HS")
    end
end
callbacks.Register("Draw", drawIndicators)


--***********************************************--

print("♥♥♥ " .. GetScriptName() .. " loaded without Errors ♥♥♥")